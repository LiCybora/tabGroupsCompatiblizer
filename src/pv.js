/*******************************************************************************

    Script for converting backup JSON generated by Panorama View to legacy Tab 
    Groups (by Quicksaver) format. To avoid ambiguous, terms refers to the 
    following two projects:

    Panorama View: Refer to https://github.com/photodiode/panorama-view/
    Tab Groups: Refer to https://github.com/Quicksaver/Tab-Groups 

    For easy typing, use short from PV for Panorama View, and TG for Tab Groups.


    Note: NOT all information can be transformed.

    Author: LiCybora
 */
"use strict";

const fs = require("promise-fs");

exports.convert = async (filename) => {
    let tabGroups = await fs.readFile(filename, "utf8");
    tabGroups = JSON.parse(tabGroups);

    // Mod itself as TG.
    delete tabGroups.file;
    tabGroups.version = ["tabGroups", 1];

    // Fake session
    let maxTimeStamp = 0;
    let minTimeStmap = 1e16;
    let groupExist = [];

    // No idea why groupId 0 is not accepted.
    tabGroups.windows[0].groupIndex += 3;
    tabGroups.windows[0].activeGroup += 3;
    tabGroups.windows[0].tabs.forEach(function(tab) {
        tab.groupId += 3;           // No idea why groupId 0 is not accepted.
        tab.entries = [{
            "url": tab.url,
            "title": tab.title,
            "charset": "UTF-8",     // No charset saved in PV
            "ID": tab.index,
            "persist": true         // No idea what it is, PV don't have it.
        }];

        delete tab.url;
        delete tab.title;

        // Record earliest and latest timestamps.
        if (tab.lastAccessed > maxTimeStamp) {
            maxTimeStamp = tab.lastAccessed;
        }
        if (tab.lastAccessed < minTimeStmap) {
            minTimeStmap = tab.lastAccessed;
        }
        // Quicksaver seems not start id from 0 but 1.  
        tab.extData = {
            "tabview-tab": "{\"groupID\":" + (tab.groupId) + "}"
        };

        // Belows are not saved by PV, just create it
        tab.attributes = {};
        // Hide inactive groups
        tab.hidden = (tab.groupId !== tabGroups.windows[0].activeGroup);


        let tvt = {
            "groupID": tab.groupId
        };
        // Randomly determine active tab in group as PV don't have it.
        if (groupExist.indexOf(tab.groupId) === -1) {
            groupExist.push(tab.groupId);
            tvt.acitve = true;
        }

        tab.extData = {
            "tabview-tab": JSON.stringify(tvt, null)
        };

        delete tab.groupId;
        tab.index = 1;      // This is hard coded by TG and no idea why.
    });

    // This is not true session, but Panorama-view don't provide this info
    tabGroups.session = {
        "lastUpdate": maxTimeStamp,
        "startTime": minTimeStmap,
        "recentCrashes": 0
    };

    // PV use relative position to place group, while TG use absolute position
    // But probably better to reset it after import, change it if you want.
    const width = 1440;
    const height = 900;

    let tvg = {};
    let slot = 1;
    tabGroups.windows[0].groups.forEach(function(group) {
        group.id += 3;   // No idea why groupId 0 is not accepted
        let pos = group.rect;
        let bounds = {
            "left": width * pos.x,
            "top": height * pos.y,
            "width": width * pos.w,
            "height": height * pos.h
        };
        // No idea what it is, just set it the same as width and height.
        let userSize = {
            "x": width * pos.w,
            "y": height * pos.h
        };
        tvg[group.id.toString()] = {
            "bounds": bounds,
            "slot": slot++,
            "userSize": userSize,
            "id": group.id,
            "title": group.name,
            // These are not in PV, just create all as true (by default)
            "stackTabs": true,
            "showThumbs": true,
            "showUrls": true,
            "tileIcons": true,
            "catchOnce": true,
            "catchRules": ""
        };
    });

    let tvgs = {
        "nextID": tabGroups.windows[0].groupIndex,
        "activeGroupId": tabGroups.windows[0].activeGroup, 
        "activeGroupName": tvg[tabGroups.windows[0].activeGroup.toString()].title, 
        "totalNumber": tabGroups.windows[0].groups.length
    };

    tabGroups.windows[0].extData = {
        "tabview-group": JSON.stringify(tvg, null),
        "tabview-groups": JSON.stringify(tvgs, null)
    };

    delete tabGroups.windows[0].groups;
    delete tabGroups.windows[0].groupIndex;
    delete tabGroups.windows[0].activeGroup;
    await fs.writeFile("./tabGroups-backup.json", JSON.stringify(tabGroups, null, 2), "utf-8");
};
