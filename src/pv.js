/*******************************************************************************

    Script for converting backup JSON generated by Panorama View to legacy Tab 
    Groups (by Quicksaver) format. To avoid ambiguous, terms refers to the 
    following two projects:

    Panorama View: Refer to https://github.com/photodiode/panorama-view/
    Tab Groups: Refer to https://github.com/Quicksaver/Tab-Groups 

    Note: NOT all information can be transformed.

    Author: LiCybora
 */
"use strict"

const fs = require('promise-fs');

exports.convert = async (filename) => {
    let tabGroups = await fs.readFile(filename, "utf8");
    tabGroups = JSON.parse(tabGroups);

    // Mod itself as Tab Groups from Quicksaver.
    delete tabGroups.file;
    tabGroups.version = ["tabGroups", 1];

    let chosenTabID = null;
    let maxTimeStamp = 0;
    let minTimeStmap = 1e16;
    tabGroups.windows[0].tabs.forEach(function(tab) {
        tab.groupId += 3;           // No idea why groupId 0 is not accepted, and perhaps also 1.
        tab.entries = [{
            "url": tab.url,
            "title": tab.title,
            "charset": "UTF-8",     // No charset saved in panorama-view
            "ID": tab.index,
            "persist": true         // No idea what it is, panorama-view don't have it.
        }];

        delete tab.url;
        delete tab.title;

        // Record earliest and latest timestamps.
        if (tab.lastAccessed > maxTimeStamp) {
            maxTimeStamp = tab.lastAccessed;
        }
        if (tab.lastAccessed < minTimeStmap) {
            minTimeStmap = tab.lastAccessed;
        }
        // Quicksaver seems not start id from 0 but 1.  
        tab.extData = {
            "tabview-tab": "{\"groupID\":" + (tab.groupId) + "}"
        };

        // Belows are not saved by panorama-view, just create it
        tab.attributes = {};
        // Randomly choose a group of tab to show
        if (chosenTabID === null) {
            chosenTabID = tab.groupId;
            tab.hidden = false;
        } else {
            tab.hidden = (tab.groupId !== chosenTabID);   // hide tabs that are not chosen.
        }

        delete tab.groupId;
        tab.index = 1;      // This is hard coded by Quicksaver and no ideay why.
    });

    // This is not true session, but Panorama-view don't provide this info
    tabGroups.session = {
        "lastUpdate": maxTimeStamp,
        "startTime": minTimeStmap,
        "recentCrashes": 0
    }

    // PV use relative position to place group, while Quicksaver use absolute position
    // But probably information will loss after import, report to me if there are issues.
    const width = 1440;
    const height = 900;

    let tvg = {};
    let slot = 1;
    tabGroups.windows[0].groups.forEach(function(group) {
        group.id += 3;   // No idea why groupId 0 is not accepted, and perhaps also 1.
        let pos = group.rect;
        let bounds = {
            "left": width * pos.x,
            "top": height * pos.y,
            "width": width * pos.w,
            "height": height * pos.h
        };
        // No idea what it is, just set it the same as width and height.
        let userSize = {
            "x": width * pos.w,
            "y": height * pos.h
        };
        tvg[group.id.toString()] = {
            "bounds": bounds,
            "slot": slot++,
            "userSize": userSize,
            "id": group.id,
            "title": group.name,
            // These are not available in Panorama-View, just create all as true (by default)
            "stackTabs": true,
            "showThumbs": true,
            "showUrls": true,
            "tileIcons": true,
            "catchOnce": true,
            "catchRules": ""
        };
    });

    let tvgs = {
        "nextID": tabGroups.windows[0].groupIndex,
        "activeGroupId": tabGroups.windows[0].activeGroup, 
        "activeGroupName": tvg[tabGroups.windows[0].activeGroup.toString().id], 
        "totalNumber": tabGroups.windows[0].groups.length, 
    }

    tabGroups.windows[0].extData = {
        "tabview-group": JSON.stringify(tvg, null),
        "tabview-groups": JSON.stringify(tvgs, null)
    }

    delete tabGroups.windows[0].groups;
    await fs.writeFile('./tabGroups-backup.json', JSON.stringify(tabGroups, null, 2), "utf-8");
};
