/*******************************************************************************

    Script for converting backup JSON generated by Simple Tab Groups to legacy 
    Tab Groups (by Quicksaver) format. To avoid ambiguous, terms refers to the 
    following two projects:

    Simple Tab Groups: Refer to https:/github.com/drive4ik/simple-tab-groups
    Tab Groups: Refer to https://github.com/Quicksaver/Tab-Groups 

    For easy typing, use short from STG.

    Note: NOT all information can be transformed.

    Author: LiCybora
 */
 "use strict"

const fs = require('promise-fs');

exports.convert = async (filename) => {
    let STG = await fs.readFile(filename, "utf8");
    STG = JSON.parse(STG);
    // STG is much different, better build it again.
    let tabGroups = {};
    // Mod itself as Tab Groups from Quicksaver.
    tabGroups.version = ["tabGroups", 1];
    tabGroups.windows = [{}];
    let tabs = [];
    let tvg = {};
    let activeGroup = null;
    let slot = 1;
    STG.groups.forEach(function(group) {
        group.id += 3;   // No idea why groupId 0 is not accepted, and perhaps also 1.

        tvg[group.id.toString()] = {
	        // STG has no free arrange, at least for the moment this file created
            "slot": slot++,
            "id": group.id,
            "title": group.title,
            "catchRules": group.catchTabRules,
            // These are not available in STG, just create all as true (by default)
            "stackTabs": true,
            "showThumbs": true,
            "showUrls": true,
            "tileIcons": true,
            "catchOnce": true,
        };


        group.tabs.forEach(function(tab) {
        	tab.entries = [
        		{
	              "url": tab.url,
	              "title": tab.title,
	              "charset": "UTF-8",
	              "ID": tab.id,
	              "persist": true
        		}
        	];
        	tab.pinned = false;
        	tab.attributes = {};
        	tab.extData = {"tabview-tab": "{\"groupID\":" + group.id + "}"};
        	tab.index = 1;
        	tab.image = tab.favIconUrl;
	    	if (activeGroup === null) {
	    		activeGroup = group.id;
	    		tab.hidden = false;
	    	} else {
	    		tab.hidden = (activeGroup !== group.id);
	    	}
	    	tabs.push(tab);

        	delete tab.id;
	        delete tab.url;
	        delete tab.title;
	        delete tab.active;
	        delete tab.favIconUrl;
	        delete tab.cookieStoreId;

        });
    });

    // STG don't even record last access
    // STG.session = {
    //     "lastUpdate": maxTimeStamp,
    //     "startTime": minTimeStmap,
    //     "recentCrashes": 0
    // }

    tabGroups.windows[0].tabs = tabs;

    let tvgs = {
        "nextID": STG.lastCreatedGroupPosition + 1,
        "activeGroupId": activeGroup, 
        "activeGroupName": tvg[activeGroup.toString().id], 
        "totalNumber": STG.groups.length, 
    }

    tabGroups.windows[0].extData = {
        "tabview-group": JSON.stringify(tvg, null),
        "tabview-groups": JSON.stringify(tvgs, null)
    }

    await fs.writeFile('./tabGroups-backup.json', JSON.stringify(tabGroups, null, 2), "utf-8");
};